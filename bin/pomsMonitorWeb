#!/usr/bin/env python3
"""Web interface for POMS production monitoring."""

import os
import sys

# Add parent directory (prodtools) to path to import as package
parent_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0, parent_dir)

from flask import Flask, jsonify, request, send_file, redirect
from utils.pomsMonitor import PomsMonitor
import subprocess

app = Flask(__name__, 
            static_folder=os.path.join(parent_dir, 'web', 'static'))

# Global analyzer instance
analyzer = None

def get_analyzer():
    """Get or create the PomsMonitor instance."""
    global analyzer
    if analyzer is None:
        analyzer = PomsMonitor(pattern='MDC202*')
        analyzer.load_files()
    return analyzer

@app.route('/')
def index():
    """Main page - redirect to monitor."""
    return redirect('/monitor')

@app.route('/monitor')
def monitor():
    """Main monitor interface."""
    static_path = os.path.join(parent_dir, 'web', 'static', 'monitor.html')
    return send_file(static_path)

@app.route('/api/jobs')
def api_jobs():
    """API endpoint for all job definitions."""
    pm = get_analyzer()
    
    jobs = []
    for entry in pm.data:
        tarball = entry.get('tarball', '')
        njobs = entry.get('njobs', 0)
        source_file = entry.get('source_file', '')
        output_details = []
        
        try:
            dataset_infos = pm.get_output_datasets_with_counts(tarball)
            for dataset_name, nfiles, nevts, total_size in dataset_infos:
                avg_size = total_size / nfiles / 1e6 if nfiles > 0 else 0
                output_details.append({
                    'name': dataset_name,
                    'nfiles': nfiles,
                    'nevts': nevts,
                    'avg_size_mb': round(avg_size, 2),
                    'status': '✓' if nfiles >= njobs else '✗'
                })
        except Exception:
            # Fallback to basic dataset names
            for o in entry.get('outputs', []):
                if o.get('dataset'):
                    output_details.append({
                        'name': o['dataset'],
                        'nfiles': 0,
                        'nevts': 0,
                        'avg_size_mb': 0,
                        'status': '?'
                    })
        
        jobs.append({
            'njobs': njobs,
            'tarball': tarball,
            'source_file': source_file,
            'outputs': output_details
        })
    
    return jsonify(jobs)

@app.route('/api/dataset/<dataset_name>')
def api_dataset_info(dataset_name):
    """API endpoint to get dataset information using famtree."""
    use_stats = request.args.get('stats', 'false').lower() == 'true'
    
    # Create mermaid output directory
    mermaid_dir = os.path.join(parent_dir, 'web', 'mermaid')
    os.makedirs(mermaid_dir, exist_ok=True)
    
    # Change to mermaid directory to run famtree
    original_dir = os.getcwd()
    os.chdir(mermaid_dir)
    
    try:
        cmd = ['famtree']
        if use_stats:
            cmd.append('--stats')
        cmd.append(dataset_name)
        
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=30)
        
        if result.returncode != 0:
            return jsonify({'success': False, 'output': result.stderr.strip()})
        
        # Look for the .md file that famtree created
        base_name = dataset_name.replace('.art', '') if dataset_name.endswith('.art') else dataset_name
        md_filename = f'{base_name}.md'
        
        if os.path.exists(md_filename):
            try:
                with open(md_filename, 'r') as f:
                    md_content = f.read()
                return jsonify({
                    'success': True,
                    'output': md_content,
                    'has_mermaid': '```mermaid' in md_content
                })
            except Exception as e:
                return jsonify({
                    'success': True,
                    'output': result.stdout.strip(),
                    'error': f'Could not read {md_filename}: {str(e)}'
                })
        
        return jsonify({
            'success': True,
            'output': result.stdout.strip(),
            'error': f'No .md file found: {md_filename}'
        })
    finally:
        os.chdir(original_dir)


def main():
    """Run the Flask development server."""
    print("Starting POMS Monitor Web Interface...")
    print("Open your browser to: http://localhost:5000")
    print("Note: Make sure to source bin/setup.sh for famtree functionality")
    app.run(debug=False, host='0.0.0.0', port=5000)

if __name__ == '__main__':
    main()

