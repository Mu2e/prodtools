#!/usr/bin/env python3
"""
Log metrics visualization - creates plots from CSV files generated by logparser
Requires pandas. Run: pyenv ana

Usage:
    python3 utils/plot_logs.py <csv_file>
    
Example:
    logparser log.mu2e.MyDataset.log --csv
    python3 utils/plot_logs.py log.mu2e.NeutralsFlash.MDC2025ac.csv
    
Output:
    - Generates <csv_file>.png with time series plots
    - Shows CPU/Real time and Memory (VmPeak/VmHWM) over time
    - Includes mean lines and statistics
"""
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import sys
import os

# Load data
csv_file = sys.argv[1] if len(sys.argv) > 1 else 'log.csv'
df = pd.read_csv(csv_file)

# Parse datetime - remove timezone part and parse date
df['datetime'] = pd.to_datetime(df['date'].str.rsplit(' ', n=1).str[0], format='%d-%b-%Y %H:%M:%S')
df = df.sort_values('datetime')

# Create figure
fig, axes = plt.subplots(1, 2, figsize=(12, 4))
fig.suptitle(os.path.basename(csv_file), fontsize=12, fontweight='bold')

# Time series
cpu_mean = df['CPU [h]'].mean()
real_mean = df['Real [h]'].mean()
axes[0].scatter(df['datetime'], df['CPU [h]'], s=10, label=f'CPU (μ={cpu_mean:.1f})')
axes[0].scatter(df['datetime'], df['Real [h]'], s=10, label=f'Real (μ={real_mean:.1f})')
axes[0].axhline(cpu_mean, color='C0', linestyle='--', alpha=0.5)
axes[0].axhline(real_mean, color='C1', linestyle='--', alpha=0.5)
axes[0].set_ylabel('Time [h]')
axes[0].legend()
axes[0].grid(alpha=0.3)
axes[0].xaxis.set_major_formatter(mdates.DateFormatter('%d-%b-%Y'))
axes[0].tick_params(axis='x', rotation=45)

# Memory
vmpeak_mean = df['VmPeak [GB]'].mean()
vmhwm_mean = df['VmHWM [GB]'].mean()
axes[1].scatter(df['datetime'], df['VmPeak [GB]'], s=10, label=f'VmPeak (μ={vmpeak_mean:.2f})')
axes[1].scatter(df['datetime'], df['VmHWM [GB]'], s=10, label=f'VmHWM (μ={vmhwm_mean:.2f})')
axes[1].axhline(vmpeak_mean, color='C0', linestyle='--', alpha=0.5)
axes[1].axhline(vmhwm_mean, color='C1', linestyle='--', alpha=0.5)
axes[1].set_ylabel('Memory [GB]')
axes[1].legend()
axes[1].grid(alpha=0.3)
axes[1].xaxis.set_major_formatter(mdates.DateFormatter('%d-%b-%Y'))
axes[1].tick_params(axis='x', rotation=45)

plt.tight_layout(rect=[0, 0, 1, 0.96])
output = csv_file.replace('.csv', '.png')
plt.savefig(output, dpi=150)
print(f'Saved: {output}')

# Stats
print(f'\nFiles: {len(df)}')
print(f'CPU:  {df["CPU [h]"].mean():.2f} ± {df["CPU [h]"].std():.2f} h')
print(f'Real: {df["Real [h]"].mean():.2f} ± {df["Real [h]"].std():.2f} h')
print(f'Mem:  {df["VmPeak [GB]"].mean():.2f} ± {df["VmPeak [GB]"].std():.2f} GB')

